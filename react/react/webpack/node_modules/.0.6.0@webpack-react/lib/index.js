'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

exports.default = webpackReact;

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _dock = require('./components/dock');

var _dock2 = _interopRequireDefault(_dock);

var _logo = require('./components/logo');

var _logo2 = _interopRequireDefault(_logo);

var _eventemitter = require('eventemitter3');

var _eventemitter2 = _interopRequireDefault(_eventemitter);

var _util = require('util');

var _util2 = _interopRequireDefault(_util);

var _pureStamp = require('pure-stamp');

var _pureStamp2 = _interopRequireDefault(_pureStamp);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

var should = require('chai').should();

var APP_SCOPE = 'app';
var GLOBAL_KEY = '__WEBPACK__';

/**
 * webpackReact
 * Requires dependencies { React, Immutable } and component defaults and returns form component factory.
 */
function webpackReact(deps) {
  var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

  var _ref$appScopeName = _ref.appScopeName;
  var appScopeName = _ref$appScopeName === undefined ? 'app' : _ref$appScopeName;

  var defaults = _objectWithoutProperties(_ref, ['appScopeName']);

  var pure = (0, _pureStamp2.default)(deps, defaults);
  var React = pure.React;
  var PropTypes = pure.PropTypes;
  var cloneElement = pure.cloneElement;
  var ReactDOM = pure.ReactDOM;
  var Immutable = pure.Immutable;
  var Pre = pure.Pre;

  var Dock = (0, _dock2.default)(pure);
  var Logo = (0, _logo2.default)(pure);

  /** This is just here to throw errors if the user is accidentally instantiating formula twice. */
  should.not.exist(global[GLOBAL_KEY], 'webpack-react: webpackReact function should only be called once per application.');

  function scope(scopeName) {
    should.exist(scopeName, 'webpack-react: scope function requires a unique scopeName.');

    var SCOPE_ID = '__formula__' + scopeName;
    var SCOPE_DOM_ID = SCOPE_ID + '_root';

    var access = { get scope() {
        return global[SCOPE_ID];
      },
      set scope(value) {
        global[SCOPE_ID] = value;
      },
      getDOMNode: function getDOMNode() {
        if ((typeof window === 'undefined' ? 'undefined' : _typeof(window)) !== 'object') return console.warn('webpack-react: bypassing rendering on server.');
        var rootNode = document.getElementById(SCOPE_DOM_ID);
        if (rootNode) return rootNode;
        rootNode = document.createElement('div');
        rootNode.id = SCOPE_DOM_ID;
        document.body.appendChild(rootNode);
        return rootNode;
      }
    };

    var EE = new _eventemitter2.default();
    function registerListeners(eventKey) {
      var listeners = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];

      var resolved = listeners.filter(function (x) {
        return typeof x === 'function';
      });
      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;
      var _iteratorError = undefined;

      try {
        for (var _iterator = resolved[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          var listener = _step.value;

          EE.on(eventKey, listener);
        }
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator.return) {
            _iterator.return();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }

      return function deregisterListeners() {
        var _iteratorNormalCompletion2 = true;
        var _didIteratorError2 = false;
        var _iteratorError2 = undefined;

        try {
          for (var _iterator2 = resolved[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
            var listener = _step2.value;

            EE.removeListener(eventKey, listener);
          }
        } catch (err) {
          _didIteratorError2 = true;
          _iteratorError2 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion2 && _iterator2.return) {
              _iterator2.return();
            }
          } finally {
            if (_didIteratorError2) {
              throw _iteratorError2;
            }
          }
        }
      };
    }
    var events = { registerInput: 'registerInput',
      updateInput: 'updateInput',
      configDidUpdate: 'configDidUpdate',
      configWillUpdate: function configWillUpdate(configName) {
        return 'configWillUpdate_' + configName;
      },
      inputWillUpdate: function inputWillUpdate(configName, name) {
        return 'inputWillUpdate_' + configName + '_' + name;
      }
    };

    var stylePropTypes = { theme: PropTypes.object.isRequired,
      styles: PropTypes.object.isRequired
    };

    var Context = pure({ displayName: 'Context',
      propTypes: _extends({}, stylePropTypes),
      defaultProps: _extends({}, defaults),
      init: function init() {
        var _this = this;

        this.busy = function (work) {
          if (_this.devTools) return _this.devTools.busy(work);
          return work(function () {});
        };
      },
      render: function render() {
        var _this2 = this;

        var _props = this.props;
        var showDevTools = _props.showDevTools;
        var styles = _props.styles;
        var theme = _props.theme;

        return React.createElement(
          'div',
          { id: SCOPE_ID, ref: function ref(x) {
              return access.scope = x;
            }, className: (0, _classnames2.default)(styles.Context, theme.Context) },
          React.createElement(
            WebpackState,
            { busy: this.busy },
            function (configs) {
              return showDevTools ? React.createElement(DevTools, { ref: function ref(x) {
                  return _this2.devTools = x;
                }, configs: configs }) : null;
            }
          )
        );
      }
    });

    var select = { inputValue: function inputValue(formName, name) {
        return [formName, name, 'value'];
      },
      inputType: function inputType(formName, name) {
        return [formName, name, 'type'];
      }
    };

    var WebpackState = pure({ displayName: 'WebpackState',
      state: { configs: Immutable.Map()
      },
      propTypes: _extends({}, stylePropTypes, { busy: PropTypes.func.isRequired
      }),
      defaultProps: _extends({}, defaults),
      init: function init() {
        var _this3 = this;

        var busy = this.props.busy;

        this.__registers = [];
        this.configs = Immutable.Map();

        this.onRegisterInput = function (_ref2) {
          var formName = _ref2.formName;
          var name = _ref2.name;
          var _ref2$initialValue = _ref2.initialValue;
          var initialValue = _ref2$initialValue === undefined ? '' : _ref2$initialValue;
          var type = _ref2.type;

          var path = select.inputValue(formName, name);

          if (typeof _this3.configs.getIn(path) === 'undefined') {
            busy(function (notBusy) {
              _this3.configs = _this3.configs.setIn(path, initialValue);
              _this3.setState({ configs: _this3.configs }, notBusy);
              /*
                : type ? forms.setIn(select.inputType(formName, name), type)
                : forms
              */
            });
          }
        };
        this.onUpdateInput = function (_ref3) {
          var formName = _ref3.formName;
          var name = _ref3.name;
          var value = _ref3.value;

          busy(function (notBusy) {
            var path = select.inputValue(formName, name);
            _this3.configs = _this3.configs.setIn(path, value);
            _this3.setState({ configs: _this3.configs }, notBusy);
          });
        };
      },
      componentWillMount: function componentWillMount() {
        this.__registers.push(registerListeners(events.registerInput, [this.onRegisterInput]));
        this.__registers.push(registerListeners(events.updateInput, [this.onUpdateInput]));
      },
      componentWillUnmount: function componentWillUnmount() {
        while (this.__registers.length > 0) {
          this.__registers.pop()();
        }
      },
      componentDidUpdate: function componentDidUpdate(prevProps, prevState) {
        if (prevState.configs !== this.state.configs) EE.emit(events.configDidUpdate, this.state.wp);
      },
      render: function render() {
        var _props2 = this.props;
        var styles = _props2.styles;
        var theme = _props2.theme;
        var children = _props2.children;
        var wp = this.state.wp;

        return React.createElement(
          'span',
          { className: (0, _classnames2.default)(styles.webpack, theme.webpack) },
          wp.entrySeq().map(function (_ref4, key) {
            var _ref5 = _slicedToArray(_ref4, 2);

            var formName = _ref5[0];
            var inputs = _ref5[1];
            return React.createElement(ConfigState, { key: key, formName: formName, inputs: inputs });
          }),
          children(wp)
        );
      }
    });

    var ConfigState = pure({ displayName: 'ConfigState',
      propTypes: { theme: PropTypes.object.isRequired,
        styles: PropTypes.object.isRequired,
        configName: PropTypes.string.isRequired,
        inputs: PropTypes.object.isRequired,
        onSubmit: PropTypes.func,
        onChange: PropTypes.func
      },
      defaultProps: _extends({}, defaults),
      componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
        var _props3 = this.props;
        var configName = _props3.configName;
        var inputs = _props3.inputs;

        if (inputs !== nextProps.inputs) EE.emit(events.formWillUpdate(configName), nextProps.inputs);
      },
      init: function init() {
        var _this4 = this;

        this.onSubmit = function (e) {
          if (_this4.props.onSubmit) _this4.props.onSubmit(e);
          e.preventDefault();
        };
      },
      render: function render() {
        var _this5 = this;

        var _props4 = this.props;
        var styles = _props4.styles;
        var theme = _props4.theme;
        var configName = _props4.configName;
        var inputs = _props4.inputs;
        var onSubmit = _props4.onSubmit;


        return React.createElement(
          'form',
          {
            id: configName,
            ref: function ref(x) {
              return _this5.form = x;
            },
            onSubmit: onSubmit
          },
          inputs.entrySeq().map(function (_ref6, key) {
            var _ref7 = _slicedToArray(_ref6, 2);

            var name = _ref7[0];
            var meta = _ref7[1];
            return React.createElement(InputState, { key: key, configName: configName, name: name, value: meta.get('value'), type: meta.get('type') });
          })
        );
      }
    });

    var InputState = pure({ displayName: 'InputState',
      propTypes: { theme: PropTypes.object.isRequired,
        styles: PropTypes.object.isRequired,
        configName: PropTypes.string.isRequired,
        name: PropTypes.string.isRequired,
        value: PropTypes.any.isRequired,
        type: PropTypes.string
      },
      defaultProps: _extends({}, defaults),
      init: function init() {
        var _this6 = this;

        this.emitValue = function (value) {
          var _props5 = _this6.props;
          var configName = _props5.configName;
          var name = _props5.name;

          EE.emit(events.inputWillUpdate(configName, name), value);
        };
      },
      componentWillMount: function componentWillMount() {
        this.emitValue(this.props.value);
      },
      componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
        if (this.props.value !== nextProps.value) this.emitValue(nextProps.value);
      },
      render: function render() {
        var _this7 = this;

        var _props6 = this.props;
        var name = _props6.name;
        var value = _props6.value;

        return React.createElement('input', {
          ref: function ref(x) {
            return _this7.input = x;
          },
          name: name,
          value: value,
          type: 'hidden'
        });
      }
    });

    var DevTools = pure({ displayName: 'DevTools',
      propTypes: _extends({}, stylePropTypes, { wp: PropTypes.object.isRequired
      }),
      defaultProps: defaults,
      init: function init() {
        var _this8 = this;

        this.busy = function (work) {
          if (_this8.logo) {
            requestAnimationFrame(function () {
              return _this8.logo.busy();
            });
            work(function () {
              return setTimeout(function () {
                return requestAnimationFrame(function () {
                  return _this8.logo.notBusy();
                });
              }, 100);
            });
          }
        };

        this.toggle = function () {
          if (_this8.dock) _this8.dock.toggle(done);
        };
      },
      render: function render() {
        var _this9 = this;

        var _props7 = this.props;
        var styles = _props7.styles;
        var theme = _props7.theme;
        var wp = _props7.wp;


        return React.createElement(
          Dock,
          {
            ref: function ref(x) {
              return _this9.dock = x;
            },
            busy: this.busy,
            toggleContent: React.createElement(Logo, { ref: function ref(x) {
                return _this9.logo = x;
              } })
          },
          React.createElement(
            'div',
            { className: (0, _classnames2.default)(styles.dockWrap, theme.dockWrap) },
            React.createElement(
              'div',
              { className: (0, _classnames2.default)(styles.dockTitle, theme.dockTitle) },
              'react-\u2233ormula'
            ),
            React.createElement(
              'div',
              { className: (0, _classnames2.default)(styles.dockEntries, theme.dockEntries) },
              React.createElement(WebpackView, { wp: wp })
            )
          )
        );
      }
    });

    var WebpackView = pure({ displayName: 'WebpackView',
      propTypes: _extends({}, stylePropTypes, { wp: PropTypes.object.isRequired
      }),
      defaultProps: defaults,
      render: function render() {
        var _props8 = this.props;
        var styles = _props8.styles;
        var theme = _props8.theme;
        var wp = _props8.wp;

        return wp ? React.createElement(
          'span',
          null,
          wp.entrySeq().map(function (_ref8, key) {
            var _ref9 = _slicedToArray(_ref8, 2);

            var configName = _ref9[0];
            var inputs = _ref9[1];
            return React.createElement(
              'span',
              { key: key, className: (0, _classnames2.default)(styles.dockForm, theme.dockForm) },
              React.createElement(
                'div',
                { className: (0, _classnames2.default)(styles.dockConfigName, theme.dockConfigName) },
                configName
              ),
              React.createElement(
                'div',
                { className: (0, _classnames2.default)(styles.dockFormFields, theme.dockFormFields) },
                inputs.entrySeq().map(function (_ref10, key) {
                  var _ref11 = _slicedToArray(_ref10, 2);

                  var name = _ref11[0];
                  var meta = _ref11[1];
                  return React.createElement(
                    'div',
                    { key: key, className: (0, _classnames2.default)(styles.dockFormEntry, theme.dockFormEntry) },
                    name,
                    ': ',
                    React.createElement(
                      Pre,
                      null,
                      meta.get('value')
                    )
                  );
                })
              )
            );
          })
        ) : null;
      }
    });

    var currentState = Immutable.Map();
    EE.on(events.wpDidUpdate, function (newState) {
      currentState = newState;
    });
    var getState = function getState() {
      return currentState;
    };

    var subscribe = function subscribe(configNames, cb) {
      console.warn('SUBSCRIBE', configNames);
      return configNames.map(function (configName) {
        return subscribeConfig(configName, function () {
          cb(configNames.map(function (name) {
            return currentState.get(name);
          }));
        });
      });
    };

    function subscribeConfig(configName, cb) {
      EE.on(events.configWillUpdate(configName), cb);
      return function () {
        return EE.removeListener(events.configWillUpdate(configName), cb);
      };
    }

    var subscribeInput = function subscribeInput(_ref12, cb) {
      var _ref13 = _slicedToArray(_ref12, 2);

      var configName = _ref13[0];
      var name = _ref13[1];

      EE.on(events.inputWillUpdate(configName, name), cb);
      return function () {
        return EE.removeListener(events.inputWillUpdate(configName, name), cb);
      };
    };

    var wp = wpContext(pure)({ getState: getState,
      subscribe: subscribe,
      subscribeConfig: subscribeConfig,
      subscribeInput: subscribeInput,
      events: events,
      emit: function emit() {
        return EE.emit.apply(EE, arguments);
      }
    });

    var domNode = access.getDOMNode();
    if (domNode) ReactDOM.render(React.createElement(Context, { showDevTools: true }), domNode);

    wp.getState = getState;
    wp.subscribe = subscribe;
    wp.subscribeInput = subscribeInput;
    return Object.assign(wp, { getState: getState, subscribe: subscribe, subscribeInput: subscribeInput });
  }
  var formula = scope(APP_SCOPE);
  formula.scope = scope;
  Object.freeze(formula);
  Object.freeze(formula.scope);
  return formula;
}