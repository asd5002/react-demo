'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

var Input = composePure({ displayName: 'Input',
  statics: { formName: formName
  },
  propTypes: { styles: PropTypes.object.isRequired,
    theme: PropTypes.object.isRequired,
    name: PropTypes.string.isRequired,
    type: PropTypes.string.isRequired,
    initialValue: PropTypes.any,
    subscribeInput: PropTypes.object,
    subscribeForm: PropTypes.object,
    shouldUpdate: PropTypes.func.isRequired
  },
  defaultProps: _extends({}, defaults, { shouldUpdate: function shouldUpdate() {
      return true;
    }
  }),
  init: function init() {
    var _this = this;

    this.getInputState = function () {
      var _props = _this.props;
      var name = _props.name;
      var initialValue = _props.initialValue;

      return currentState.getIn(select.inputValue(formName, name), initialValue);
    };

    this.setValue = function (value) {
      switch (_this.input.type) {
        case 'checkbox':
          if (value == 'true' || value == true || value == 'checked') _this.input.checked = true;else _this.input.removeAttribute('checked');
          break;
        default:
          _this.input.value = value;
          break;
      }
    };

    this.getValue = function () {
      var _input = _this.input;
      var type = _input.type;
      var value = _input.value;
      var checked = _input.checked;

      switch (type) {
        case 'checkbox':
          return checked == 'true' || checked == 'checked';
        default:
          return value;
      }
    };
    this.syncValue = function (target) {
      var _select;

      var value = getState().getIn((_select = select).inputValue.apply(_select, _toConsumableArray(target)));
      _this.setValue(value);
    };
  },
  componentDidMount: function componentDidMount() {
    var _this2 = this;

    var _props2 = this.props;
    var name = _props2.name;
    var type = _props2.type;
    var initialValue = _props2.initialValue;
    var shouldUpdate = _props2.shouldUpdate;

    EE.emit(events.registerInput, { formName: formName, name: name, type: type, initialValue: initialValue });

    var selectString = '#' + formName + ' input[name="' + name + '"]';
    var input = document.querySelector(selectString);
    if (typeof input !== 'undefined' && input !== null) {
      this.setValue(input.value);
    } else {
      //console.info('skipping value', input)
    }

    if (this.props.subscribeInput) {
      (function () {
        var target = _this2.props.subscribeInput;
        _this2.unsubscribeInput = subscribeInput(target, function (value) {
          if (shouldUpdate({ currentValue: _this2.getValue(),
            subscribed: value,
            subscriptionType: 'input',
            target: target
          })) {
            _this2.setValue(value);
          }
        });
        _this2.syncValue(target);
      })();
    }
    if (this.props.subscribeForm) {
      (function () {
        var _props$subscribeForm = _this2.props.subscribeForm;
        var target = _props$subscribeForm.target;
        var targetName = _props$subscribeForm.targetName;
        var selectValue = _props$subscribeForm.selectValue;
        var selectInitial = _props$subscribeForm.selectInitial;

        _this2.unsubscribeForm = subscribeForm(target, function (inputs) {
          if (shouldUpdate({ currentValue: _this2.getValue(),
            subscribed: inputs,
            subscriptionType: 'form',
            target: target
          })) {
            var resolvedName = typeof targetName === 'function' ? targetName() : targetName;
            if (resolvedName) {
              _this2.setValue(inputs.getIn([resolvedName, 'value']));
            } else if (selectValue) {
              _this2.setValue(selectValue(inputs));
            }
          }
        });
        if (selectInitial) _this2.syncValue({ formName: target, name: typeof selectInitial === 'function' ? selectInitial() : selectInitial });
      })();
    }
  },
  componentWillUnmount: function componentWillUnmount() {
    if (this.unsubscribeInput) this.unsubscribeInput();
    if (this.unsubscribeForm) this.unsubscribeForm();
  },
  render: function render() {
    var _this3 = this;

    var _props3 = this.props;
    var styles = _props3.styles;
    var theme = _props3.theme;
    var name = _props3.name;
    var type = _props3.type;
    var initialValue = _props3.initialValue;
    var subscribeTo = _props3.subscribeTo;

    var inputProps = _objectWithoutProperties(_props3, ['styles', 'theme', 'name', 'type', 'initialValue', 'subscribeTo']);

    var value = this.props.value || initialValue;
    return React.createElement(
      'span',
      { className: cn(styles.inputWrap, theme.inputWrap, styles['type_' + type], theme['type_' + type]) },
      React.createElement('input', _extends({}, inputProps, {
        ref: function ref(x) {
          return _this3.input = x;
        },
        type: type,
        onChange: function onChange(e) {
          var _e$target = e.target;
          var value = _e$target.value;
          var checked = _e$target.checked;

          EE.emit(events.updateInput, { formName: formName, name: name, value: type === 'checkbox' ? checked : value });
        },
        className: cn(styles.input, theme.input)
      })),
      React.createElement('div', { className: cn(styles.inputUI, theme.inputUI) })
    );
  }
});