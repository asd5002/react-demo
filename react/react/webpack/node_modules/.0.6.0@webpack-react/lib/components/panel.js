'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

exports.default = panel;

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var should = require('chai').should();

function panel(pure) {
  var React = pure.React;
  var PropTypes = pure.PropTypes;
  var defaults = pure.defaults;


  return pure({ displayName: 'Panel',
    propTypes: { styles: PropTypes.object.isRequired,
      theme: PropTypes.object.isRequired
    },
    defaultProps: _extends({}, defaults),
    render: function render() {
      var _props = this.props;
      var styles = _props.styles;
      var theme = _props.theme;
      var children = _props.children;


      return React.createElement(
        'div',
        { style: { width: '100%' }, className: styles.panel },
        React.createElement(
          'div',
          { style: containerStyle },
          React.createElement(
            'div',
            { style: headerStyle },
            React.createElement(
              'h2',
              { className: 'pull-left', style: titleStyle },
              title
            ),
            React.createElement(
              'div',
              { className: 'pull-right', style: iconStyle },
              React.createElement(FA, { name: iconName, loadingName: iconLoadingName, size: iconSize, color: accentColor, isLoading: isLoading })
            )
          ),
          message ? React.createElement(
            'div',
            { style: { clear: 'both', margin: 10, fontSize: '1.2em' } },
            message
          ) : null,
          React.createElement(
            'div',
            { style: contentStyle },
            children
          ),
          errors && errors.size > 0 ? React.createElement(
            'div',
            { style: errorContainerStyle },
            errors.takeLast(maxErrors).map(function (error, i) {
              return React.createElement(
                'div',
                { key: i, style: errorStyle },
                error.message
              );
            })
          ) : null
        )
      );
    }
  });
}