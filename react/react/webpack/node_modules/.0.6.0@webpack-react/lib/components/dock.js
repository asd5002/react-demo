'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

exports.default = dock;

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var should = require('chai').should();

function dock(pure) {
  var React = pure.React;
  var PropTypes = pure.PropTypes;
  var defaults = pure.defaults;


  return pure({ displayName: 'Dock',
    propTypes: { styles: PropTypes.object.isRequired,
      theme: PropTypes.object.isRequired,
      transitionDelay: PropTypes.number.isRequired
    },
    defaultProps: _extends({}, defaults, { transitionDelay: 200
    }),
    init: function init() {
      var _this = this;

      var timeoutID = null;

      this.isActive = function () {
        var _props = _this.props;
        var styles = _props.styles;
        var theme = _props.theme;

        return !(_this.element && _this.element.className && _this.element.className.includes(styles.dockDisabled));
      };

      this._getStyles = function () {
        var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

        var _ref$isActive = _ref.isActive;
        var isActive = _ref$isActive === undefined ? false : _ref$isActive;
        var _ref$isBusy = _ref.isBusy;
        var isBusy = _ref$isBusy === undefined ? false : _ref$isBusy;
        var _props2 = _this.props;
        var styles = _props2.styles;
        var theme = _props2.theme;


        var commonClasses = [styles.dock, theme.dock];
        var busyClasses = isBusy ? [styles.busy, theme.busy] : [];
        var transitionClasses = [styles.dockTransition, theme.dockTransition].concat(busyClasses);

        if (isActive) {
          var enabledClasses = [].concat(commonClasses, [styles.dockEnabled, theme.dockEnabled]);
          return [(0, _classnames2.default)(enabledClasses), (0, _classnames2.default)(enabledClasses, transitionClasses)];
        } else {
          var disabledClasses = [].concat(commonClasses, [styles.dockDisabled, theme.dockDisabled]);
          return [(0, _classnames2.default)(disabledClasses), (0, _classnames2.default)(disabledClasses, transitionClasses)];
        }
      };

      this.transition = function (_ref2, done) {
        var _ref3 = _slicedToArray(_ref2, 2);

        var primaryStyle = _ref3[0];
        var transitionStyle = _ref3[1];

        _this.element.className = transitionStyle || primaryStyle;
        if (transitionStyle) {
          var transitionDelay = _this.props.transitionDelay;

          setTimeout(function () {
            _this.element.className = primaryStyle;
            if (done) done();
          }, transitionDelay);
        }
      };

      this.toggle = function () {
        var done = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : function () {};

        _this.props.busy(function (notBusy) {
          if (_this.element) {
            _this.transition(_this._getStyles({ isActive: !_this.isActive(), isBusy: false }), function () {
              done();
              notBusy();
            });
          }
        });
      };
    },
    render: function render() {
      var _this2 = this;

      var _props3 = this.props;
      var styles = _props3.styles;
      var theme = _props3.theme;
      var children = _props3.children;
      var toggleContent = _props3.toggleContent;

      var _getStyles = this._getStyles();

      var _getStyles2 = _slicedToArray(_getStyles, 1);

      var primaryStyle = _getStyles2[0];


      return React.createElement(
        'div',
        { ref: function ref(x) {
            return _this2.element = x;
          }, className: primaryStyle },
        React.createElement(
          'div',
          { className: (0, _classnames2.default)(styles.dockContent, theme.dockContent) },
          React.createElement(
            'div',
            { className: (0, _classnames2.default)(styles.dockColumn, theme.dockColumn) },
            children
          )
        ),
        React.createElement(
          'div',
          { className: (0, _classnames2.default)(styles.buttonContainer, theme.buttonContainer) },
          React.createElement('span', { className: (0, _classnames2.default)(styles.flexSpacer, theme.flexSpacer) }),
          React.createElement(
            'span',
            { className: (0, _classnames2.default)(styles.flexItem, theme.flexItem) },
            React.createElement(
              'button',
              {
                className: (0, _classnames2.default)(styles.dockButton, theme.dockButton),
                onClick: function onClick() {
                  return _this2.toggle();
                }
              },
              toggleContent
            )
          )
        )
      );
    }
  });
}