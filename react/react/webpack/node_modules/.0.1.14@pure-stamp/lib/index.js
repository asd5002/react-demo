'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

exports.default = pureStamp;

var _reactStamp2 = require('react-stamp');

var _reactStamp3 = _interopRequireDefault(_reactStamp2);

var _profile = require('./desc/profile');

var _profile2 = _interopRequireDefault(_profile);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

var CONNECT_KEY = 'connect';

var freezeValue = function freezeValue(value) {
  return { value: value, enumerable: true, writable: false, configurable: false };
};

/**
 * Creates an optimized pure compose function with dependencies tacked onto it for easy lib propagation.
 * @param  {Object}         options.React           React dependency.
 * @param  {Object}         options.shallowCompare  React shallowCompare add-on dependency.
 * @param  {Array<Object>}  options.deps            Optional dependencies to propagate.
 * @param  {Object}         defaults                Optional configuration object to propagate.
 * @return {function}                                 pure compose function with propagated dependencies and defaults.
 */
function pureStamp() {
  var _ref = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

  var React = _ref.React;
  var shallowCompare = _ref.shallowCompare;

  var deps = _objectWithoutProperties(_ref, ['React', 'shallowCompare']);

  var defaults = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];
  var PropTypes = React.PropTypes;
  var cloneElement = React.cloneElement;

  var _reactStamp = (0, _reactStamp3.default)(React);

  var compose = _reactStamp.compose;


  var HAS_CONNECT = Object.keys(deps).includes(CONNECT_KEY);

  var pure = Object.entries(_extends({ React: React,
    PropTypes: PropTypes,
    cloneElement: cloneElement
  }, deps, { defaults: defaults,
    impure: compose,
    profile: _profile2.default,
    destructure: function destructure() {
      return [_extends({ React: React, shallowCompare: shallowCompare }, deps), defaults];
    }
  })).reduce(function (pure, _ref2) {
    var _ref3 = _slicedToArray(_ref2, 2);

    var depName = _ref3[0];
    var dep = _ref3[1];
    return Object.defineProperty(pure, depName, freezeValue(dep));
  }, function pure() {
    var mapState = void 0;
    var mapDispatch = void 0;
    var merge = void 0;
    var options = void 0;

    /** Strips mapState, mapDispatch, mergeProps, and options from any 'connect' keys on description object. */
    function stripConnect(reactDesc) {
      return Object.entries(reactDesc).reduce(function (reduced, _ref4) {
        var _ref5 = _slicedToArray(_ref4, 2);

        var key = _ref5[0];
        var value = _ref5[1];

        /** If key is not connect key, pass the prop along. */
        if (key !== CONNECT_KEY) return _extends({}, reduced, _defineProperty({}, key, value));

        /** key is connect key, strip and compose each of the present connect functions */
        var mapStateToProps = value.mapStateToProps;
        var mapDispatchToProps = value.mapDispatchToProps;
        var mergeProps = value.mergeProps;


        var lastMapState = mapState;
        var lastMapDispatch = mapDispatch;
        var lastMerge = merge;

        if (mapStateToProps) {
          if (mapStateToProps.length === 1 && (!mapState || mapState.length === 1)) mapState = function mapState(state) {
            return _extends({}, lastMapState ? lastMapState(state) : {}, mapStateToProps(state));
          };else mapState = function mapState() {
            return _extends({}, lastMapState ? lastMapState.apply(undefined, arguments) : {}, mapStateToProps.apply(undefined, arguments));
          };
        }
        if (mapDispatchToProps) {
          if (mapDispatchToProps.length === 1 && (!mapDispatch || mapDispatch.length === 1)) mapDispatch = function mapDispatch(dispatch) {
            return _extends({}, lastMapDispatch ? lastMapDispatch(dispatch) : {}, mapDispatchToProps(dispatch));
          };else mapDispatch = function mapDispatch() {
            return _extends({}, lastMapDispatch ? lastMapDispatch.apply(undefined, arguments) : {}, mapDispatchToProps.apply(undefined, arguments));
          };
        }
        if (mergeProps) merge = function merge() {
          return _extends({}, lastMerge ? lastMerge.apply(undefined, arguments) : {}, mergeProps.apply(undefined, arguments));
        };
        if (value.options) options = _extends({}, options || {}, value.options);
        return reduced;
      }, {});
    }

    for (var _len = arguments.length, desc = Array(_len), _key = 0; _key < _len; _key++) {
      desc[_key] = arguments[_key];
    }

    var Stamp = compose.apply(undefined, [{ displayName: 'PureComponent',
      shouldComponentUpdate: function shouldComponentUpdate(nextProps, nextState) {
        return shallowCompare(this, nextProps, nextState);
      }
    }
    /** If redux connect dep passed and connect key detected, will strip out their mapStateToProps and mapDispatchToProps and apply them automatically. */
    ].concat(_toConsumableArray(HAS_CONNECT ? desc.map(stripConnect) : desc)));

    var useConnect = HAS_CONNECT && (mapState || mapDispatch || merge);
    return useConnect ? deps.connect(mapState, mapDispatch, merge, options)(Stamp) : Stamp;
  });
  return Object.freeze(pure);
}